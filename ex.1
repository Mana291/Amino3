import pyxel
import random

class TetrisBlock:
    def __init__(self):
        self.x = 88
        self.y = 0
        self.size = 8
        self.velocity_y = 1
        self.rotation = 0
        self.stopped = False
        self.current_tetromino = self.get_random_tetromino()
        self.block_data = self.generate_block_data()
        self.block_colors = {'A': 3, 'G': 10, 'C': 8, 'U': 2}

    def get_random_tetromino(self):
        tetrominos = [
            [[1, 1, 1, 1]],
            [[1, 1], [1, 1]],
            [[0, 1, 1], [1, 1, 0]],
            [[1, 1, 0], [0, 1, 1]],
            [[0, 1, 0], [1, 1, 1]]
        ]
        return random.choice(tetrominos)

    def generate_block_data(self):
        return [[' ' if cell == 0 else random.choice(['A', 'G', 'C', 'U']) for cell in row] for row in self.current_tetromino]

    def rotate_tetromino(self):
        self.current_tetromino = [list(row) for row in zip(*reversed(self.current_tetromino))]
        self.block_data = self.generate_block_data()

    def update(self, stopped_blocks):
        if not self.stopped:
            if pyxel.btnp(pyxel.KEY_LEFT):
                self.x -= self.size
            elif pyxel.btnp(pyxel.KEY_RIGHT):
                self.x += self.size
            elif pyxel.btn(pyxel.KEY_DOWN):
                self.y += 2
            elif pyxel.btnp(pyxel.KEY_SPACE):
                self.rotate_tetromino()

            self.y += self.velocity_y

            # 底に到達
            if self.y + self.size * len(self.current_tetromino) >= pyxel.height:
                self.y = pyxel.height - self.size * len(self.current_tetromino)
                self.stopped = True

            # 衝突判定
            for block in stopped_blocks:
                for i in range(len(self.current_tetromino)):
                    for j in range(len(self.current_tetromino[i])):
                        if self.current_tetromino[i][j] == 1:
                            bx = self.x + j * self.size
                            by = self.y + i * self.size
                            if (bx, by) == (block[0], block[1]):
                                self.stopped = True
                                return

    def draw(self):
        for i in range(len(self.current_tetromino)):
            for j in range(len(self.current_tetromino[i])):
                if self.current_tetromino[i][j] == 1:
                    x = self.x + j * self.size
                    y = self.y + i * self.size
                    base = self.block_data[i][j]
                    pyxel.rect(x, y, self.size, self.size, self.block_colors.get(base, 0))
                    pyxel.text(x + 1, y + 1, base, 0)

tetris_block = TetrisBlock()
blocks = []
score = 0
game_over = False

def update():
    global blocks, score, tetris_block, game_over

    if game_over:
        if pyxel.btnp(pyxel.KEY_SPACE):
            blocks.clear()
            score = 0
            game_over = False
            tetris_block = TetrisBlock()
        return

    tetris_block.update(blocks)

    if tetris_block.stopped:
        for i in range(len(tetris_block.current_tetromino)):
            for j in range(len(tetris_block.current_tetromino[i])):
                if tetris_block.current_tetromino[i][j] == 1:
                    x = tetris_block.x + j * tetris_block.size
                    y = tetris_block.y + i * tetris_block.size
                    blocks.append((x, y, tetris_block.block_data[i][j]))

        if any(b[1] < 24 for b in blocks):
            game_over = True
        else:
            tetris_block = TetrisBlock()
            score += 1

def draw():
    pyxel.cls(7)
    for x in range(0, pyxel.width, 8):
        pyxel.line(x, 0, x, pyxel.height, 6)
    for y in range(0, pyxel.height, 8):
        pyxel.line(0, y, pyxel.width, y, 6)

    for block in blocks:
        x, y, base = block
        pyxel.rect(x, y, 8, 8, tetris_block.block_colors.get(base, 0))
        pyxel.text(x + 1, y + 1, base, 0)

    tetris_block.draw()
    pyxel.line(0, 24, pyxel.width, 24, 12)
    pyxel.text(10, 5, f"Score: {score}", 1)

    if game_over:
        pyxel.text(80, 90, "GAME OVER", pyxel.frame_count % 16)
        pyxel.text(40, 120, "press space button to restart", pyxel.frame_count % 16)

pyxel.init(200, 200)
pyxel.run(update, draw)
